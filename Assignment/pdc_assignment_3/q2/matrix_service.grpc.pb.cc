// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: matrix_service.proto

#include "matrix_service.pb.h"
#include "matrix_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace matrix_service {

static const char* MatrixService_method_names[] = {
  "/matrix_service.MatrixService/SortArray",
  "/matrix_service.MatrixService/FindMinValue",
  "/matrix_service.MatrixService/FindMaxValue",
};

std::unique_ptr< MatrixService::Stub> MatrixService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MatrixService::Stub> stub(new MatrixService::Stub(channel, options));
  return stub;
}

MatrixService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SortArray_(MatrixService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FindMinValue_(MatrixService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FindMaxValue_(MatrixService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MatrixService::Stub::SortArray(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::matrix_service::ArrayResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::matrix_service::ArrayRequest, ::matrix_service::ArrayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SortArray_, context, request, response);
}

void MatrixService::Stub::async::SortArray(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest* request, ::matrix_service::ArrayResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::matrix_service::ArrayRequest, ::matrix_service::ArrayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SortArray_, context, request, response, std::move(f));
}

void MatrixService::Stub::async::SortArray(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest* request, ::matrix_service::ArrayResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SortArray_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::matrix_service::ArrayResponse>* MatrixService::Stub::PrepareAsyncSortArrayRaw(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::matrix_service::ArrayResponse, ::matrix_service::ArrayRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SortArray_, context, request);
}

::grpc::ClientAsyncResponseReader< ::matrix_service::ArrayResponse>* MatrixService::Stub::AsyncSortArrayRaw(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSortArrayRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MatrixService::Stub::FindMinValue(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::matrix_service::MinMaxResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::matrix_service::ArrayRequest, ::matrix_service::MinMaxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FindMinValue_, context, request, response);
}

void MatrixService::Stub::async::FindMinValue(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest* request, ::matrix_service::MinMaxResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::matrix_service::ArrayRequest, ::matrix_service::MinMaxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindMinValue_, context, request, response, std::move(f));
}

void MatrixService::Stub::async::FindMinValue(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest* request, ::matrix_service::MinMaxResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindMinValue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::matrix_service::MinMaxResponse>* MatrixService::Stub::PrepareAsyncFindMinValueRaw(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::matrix_service::MinMaxResponse, ::matrix_service::ArrayRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FindMinValue_, context, request);
}

::grpc::ClientAsyncResponseReader< ::matrix_service::MinMaxResponse>* MatrixService::Stub::AsyncFindMinValueRaw(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFindMinValueRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MatrixService::Stub::FindMaxValue(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::matrix_service::MinMaxResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::matrix_service::ArrayRequest, ::matrix_service::MinMaxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FindMaxValue_, context, request, response);
}

void MatrixService::Stub::async::FindMaxValue(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest* request, ::matrix_service::MinMaxResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::matrix_service::ArrayRequest, ::matrix_service::MinMaxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindMaxValue_, context, request, response, std::move(f));
}

void MatrixService::Stub::async::FindMaxValue(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest* request, ::matrix_service::MinMaxResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindMaxValue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::matrix_service::MinMaxResponse>* MatrixService::Stub::PrepareAsyncFindMaxValueRaw(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::matrix_service::MinMaxResponse, ::matrix_service::ArrayRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FindMaxValue_, context, request);
}

::grpc::ClientAsyncResponseReader< ::matrix_service::MinMaxResponse>* MatrixService::Stub::AsyncFindMaxValueRaw(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFindMaxValueRaw(context, request, cq);
  result->StartCall();
  return result;
}

MatrixService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MatrixService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MatrixService::Service, ::matrix_service::ArrayRequest, ::matrix_service::ArrayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MatrixService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::matrix_service::ArrayRequest* req,
             ::matrix_service::ArrayResponse* resp) {
               return service->SortArray(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MatrixService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MatrixService::Service, ::matrix_service::ArrayRequest, ::matrix_service::MinMaxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MatrixService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::matrix_service::ArrayRequest* req,
             ::matrix_service::MinMaxResponse* resp) {
               return service->FindMinValue(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MatrixService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MatrixService::Service, ::matrix_service::ArrayRequest, ::matrix_service::MinMaxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MatrixService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::matrix_service::ArrayRequest* req,
             ::matrix_service::MinMaxResponse* resp) {
               return service->FindMaxValue(ctx, req, resp);
             }, this)));
}

MatrixService::Service::~Service() {
}

::grpc::Status MatrixService::Service::SortArray(::grpc::ServerContext* context, const ::matrix_service::ArrayRequest* request, ::matrix_service::ArrayResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MatrixService::Service::FindMinValue(::grpc::ServerContext* context, const ::matrix_service::ArrayRequest* request, ::matrix_service::MinMaxResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MatrixService::Service::FindMaxValue(::grpc::ServerContext* context, const ::matrix_service::ArrayRequest* request, ::matrix_service::MinMaxResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace matrix_service

