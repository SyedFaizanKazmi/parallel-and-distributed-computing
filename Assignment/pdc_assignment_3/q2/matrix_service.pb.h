// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: matrix_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_matrix_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_matrix_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_matrix_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_matrix_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_matrix_5fservice_2eproto;
namespace matrix_service {
class ArrayRequest;
struct ArrayRequestDefaultTypeInternal;
extern ArrayRequestDefaultTypeInternal _ArrayRequest_default_instance_;
class ArrayResponse;
struct ArrayResponseDefaultTypeInternal;
extern ArrayResponseDefaultTypeInternal _ArrayResponse_default_instance_;
class MinMaxResponse;
struct MinMaxResponseDefaultTypeInternal;
extern MinMaxResponseDefaultTypeInternal _MinMaxResponse_default_instance_;
}  // namespace matrix_service
PROTOBUF_NAMESPACE_OPEN
template<> ::matrix_service::ArrayRequest* Arena::CreateMaybeMessage<::matrix_service::ArrayRequest>(Arena*);
template<> ::matrix_service::ArrayResponse* Arena::CreateMaybeMessage<::matrix_service::ArrayResponse>(Arena*);
template<> ::matrix_service::MinMaxResponse* Arena::CreateMaybeMessage<::matrix_service::MinMaxResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace matrix_service {

// ===================================================================

class ArrayRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:matrix_service.ArrayRequest) */ {
 public:
  inline ArrayRequest() : ArrayRequest(nullptr) {}
  ~ArrayRequest() override;
  explicit PROTOBUF_CONSTEXPR ArrayRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArrayRequest(const ArrayRequest& from);
  ArrayRequest(ArrayRequest&& from) noexcept
    : ArrayRequest() {
    *this = ::std::move(from);
  }

  inline ArrayRequest& operator=(const ArrayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayRequest& operator=(ArrayRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArrayRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArrayRequest* internal_default_instance() {
    return reinterpret_cast<const ArrayRequest*>(
               &_ArrayRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ArrayRequest& a, ArrayRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArrayRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArrayRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArrayRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArrayRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArrayRequest& from) {
    ArrayRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "matrix_service.ArrayRequest";
  }
  protected:
  explicit ArrayRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayFieldNumber = 1,
  };
  // repeated int32 array = 1;
  int array_size() const;
  private:
  int _internal_array_size() const;
  public:
  void clear_array();
  private:
  int32_t _internal_array(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_array() const;
  void _internal_add_array(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_array();
  public:
  int32_t array(int index) const;
  void set_array(int index, int32_t value);
  void add_array(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      array() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_array();

  // @@protoc_insertion_point(class_scope:matrix_service.ArrayRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > array_;
    mutable std::atomic<int> _array_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_matrix_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ArrayResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:matrix_service.ArrayResponse) */ {
 public:
  inline ArrayResponse() : ArrayResponse(nullptr) {}
  ~ArrayResponse() override;
  explicit PROTOBUF_CONSTEXPR ArrayResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArrayResponse(const ArrayResponse& from);
  ArrayResponse(ArrayResponse&& from) noexcept
    : ArrayResponse() {
    *this = ::std::move(from);
  }

  inline ArrayResponse& operator=(const ArrayResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayResponse& operator=(ArrayResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArrayResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArrayResponse* internal_default_instance() {
    return reinterpret_cast<const ArrayResponse*>(
               &_ArrayResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ArrayResponse& a, ArrayResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArrayResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArrayResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArrayResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArrayResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArrayResponse& from) {
    ArrayResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "matrix_service.ArrayResponse";
  }
  protected:
  explicit ArrayResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayFieldNumber = 1,
  };
  // repeated int32 array = 1;
  int array_size() const;
  private:
  int _internal_array_size() const;
  public:
  void clear_array();
  private:
  int32_t _internal_array(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_array() const;
  void _internal_add_array(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_array();
  public:
  int32_t array(int index) const;
  void set_array(int index, int32_t value);
  void add_array(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      array() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_array();

  // @@protoc_insertion_point(class_scope:matrix_service.ArrayResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > array_;
    mutable std::atomic<int> _array_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_matrix_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MinMaxResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:matrix_service.MinMaxResponse) */ {
 public:
  inline MinMaxResponse() : MinMaxResponse(nullptr) {}
  ~MinMaxResponse() override;
  explicit PROTOBUF_CONSTEXPR MinMaxResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MinMaxResponse(const MinMaxResponse& from);
  MinMaxResponse(MinMaxResponse&& from) noexcept
    : MinMaxResponse() {
    *this = ::std::move(from);
  }

  inline MinMaxResponse& operator=(const MinMaxResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MinMaxResponse& operator=(MinMaxResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MinMaxResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MinMaxResponse* internal_default_instance() {
    return reinterpret_cast<const MinMaxResponse*>(
               &_MinMaxResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MinMaxResponse& a, MinMaxResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MinMaxResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MinMaxResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MinMaxResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MinMaxResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MinMaxResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MinMaxResponse& from) {
    MinMaxResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MinMaxResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "matrix_service.MinMaxResponse";
  }
  protected:
  explicit MinMaxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int32 value = 1;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:matrix_service.MinMaxResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_matrix_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ArrayRequest

// repeated int32 array = 1;
inline int ArrayRequest::_internal_array_size() const {
  return _impl_.array_.size();
}
inline int ArrayRequest::array_size() const {
  return _internal_array_size();
}
inline void ArrayRequest::clear_array() {
  _impl_.array_.Clear();
}
inline int32_t ArrayRequest::_internal_array(int index) const {
  return _impl_.array_.Get(index);
}
inline int32_t ArrayRequest::array(int index) const {
  // @@protoc_insertion_point(field_get:matrix_service.ArrayRequest.array)
  return _internal_array(index);
}
inline void ArrayRequest::set_array(int index, int32_t value) {
  _impl_.array_.Set(index, value);
  // @@protoc_insertion_point(field_set:matrix_service.ArrayRequest.array)
}
inline void ArrayRequest::_internal_add_array(int32_t value) {
  _impl_.array_.Add(value);
}
inline void ArrayRequest::add_array(int32_t value) {
  _internal_add_array(value);
  // @@protoc_insertion_point(field_add:matrix_service.ArrayRequest.array)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ArrayRequest::_internal_array() const {
  return _impl_.array_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ArrayRequest::array() const {
  // @@protoc_insertion_point(field_list:matrix_service.ArrayRequest.array)
  return _internal_array();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ArrayRequest::_internal_mutable_array() {
  return &_impl_.array_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ArrayRequest::mutable_array() {
  // @@protoc_insertion_point(field_mutable_list:matrix_service.ArrayRequest.array)
  return _internal_mutable_array();
}

// -------------------------------------------------------------------

// ArrayResponse

// repeated int32 array = 1;
inline int ArrayResponse::_internal_array_size() const {
  return _impl_.array_.size();
}
inline int ArrayResponse::array_size() const {
  return _internal_array_size();
}
inline void ArrayResponse::clear_array() {
  _impl_.array_.Clear();
}
inline int32_t ArrayResponse::_internal_array(int index) const {
  return _impl_.array_.Get(index);
}
inline int32_t ArrayResponse::array(int index) const {
  // @@protoc_insertion_point(field_get:matrix_service.ArrayResponse.array)
  return _internal_array(index);
}
inline void ArrayResponse::set_array(int index, int32_t value) {
  _impl_.array_.Set(index, value);
  // @@protoc_insertion_point(field_set:matrix_service.ArrayResponse.array)
}
inline void ArrayResponse::_internal_add_array(int32_t value) {
  _impl_.array_.Add(value);
}
inline void ArrayResponse::add_array(int32_t value) {
  _internal_add_array(value);
  // @@protoc_insertion_point(field_add:matrix_service.ArrayResponse.array)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ArrayResponse::_internal_array() const {
  return _impl_.array_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ArrayResponse::array() const {
  // @@protoc_insertion_point(field_list:matrix_service.ArrayResponse.array)
  return _internal_array();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ArrayResponse::_internal_mutable_array() {
  return &_impl_.array_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ArrayResponse::mutable_array() {
  // @@protoc_insertion_point(field_mutable_list:matrix_service.ArrayResponse.array)
  return _internal_mutable_array();
}

// -------------------------------------------------------------------

// MinMaxResponse

// int32 value = 1;
inline void MinMaxResponse::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t MinMaxResponse::_internal_value() const {
  return _impl_.value_;
}
inline int32_t MinMaxResponse::value() const {
  // @@protoc_insertion_point(field_get:matrix_service.MinMaxResponse.value)
  return _internal_value();
}
inline void MinMaxResponse::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void MinMaxResponse::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:matrix_service.MinMaxResponse.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace matrix_service

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_matrix_5fservice_2eproto
