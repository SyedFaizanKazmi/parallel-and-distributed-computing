// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: matrix_service.proto
#ifndef GRPC_matrix_5fservice_2eproto__INCLUDED
#define GRPC_matrix_5fservice_2eproto__INCLUDED

#include "matrix_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace matrix_service {

// Define a service for matrix operations
class MatrixService final {
 public:
  static constexpr char const* service_full_name() {
    return "matrix_service.MatrixService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sort an array
    virtual ::grpc::Status SortArray(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::matrix_service::ArrayResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matrix_service::ArrayResponse>> AsyncSortArray(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matrix_service::ArrayResponse>>(AsyncSortArrayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matrix_service::ArrayResponse>> PrepareAsyncSortArray(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matrix_service::ArrayResponse>>(PrepareAsyncSortArrayRaw(context, request, cq));
    }
    // Find the minimum value in an array
    virtual ::grpc::Status FindMinValue(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::matrix_service::MinMaxResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matrix_service::MinMaxResponse>> AsyncFindMinValue(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matrix_service::MinMaxResponse>>(AsyncFindMinValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matrix_service::MinMaxResponse>> PrepareAsyncFindMinValue(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matrix_service::MinMaxResponse>>(PrepareAsyncFindMinValueRaw(context, request, cq));
    }
    // Find the maximum value in an array
    virtual ::grpc::Status FindMaxValue(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::matrix_service::MinMaxResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matrix_service::MinMaxResponse>> AsyncFindMaxValue(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matrix_service::MinMaxResponse>>(AsyncFindMaxValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matrix_service::MinMaxResponse>> PrepareAsyncFindMaxValue(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matrix_service::MinMaxResponse>>(PrepareAsyncFindMaxValueRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Sort an array
      virtual void SortArray(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest* request, ::matrix_service::ArrayResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SortArray(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest* request, ::matrix_service::ArrayResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Find the minimum value in an array
      virtual void FindMinValue(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest* request, ::matrix_service::MinMaxResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindMinValue(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest* request, ::matrix_service::MinMaxResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Find the maximum value in an array
      virtual void FindMaxValue(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest* request, ::matrix_service::MinMaxResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindMaxValue(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest* request, ::matrix_service::MinMaxResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::matrix_service::ArrayResponse>* AsyncSortArrayRaw(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::matrix_service::ArrayResponse>* PrepareAsyncSortArrayRaw(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::matrix_service::MinMaxResponse>* AsyncFindMinValueRaw(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::matrix_service::MinMaxResponse>* PrepareAsyncFindMinValueRaw(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::matrix_service::MinMaxResponse>* AsyncFindMaxValueRaw(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::matrix_service::MinMaxResponse>* PrepareAsyncFindMaxValueRaw(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SortArray(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::matrix_service::ArrayResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matrix_service::ArrayResponse>> AsyncSortArray(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matrix_service::ArrayResponse>>(AsyncSortArrayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matrix_service::ArrayResponse>> PrepareAsyncSortArray(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matrix_service::ArrayResponse>>(PrepareAsyncSortArrayRaw(context, request, cq));
    }
    ::grpc::Status FindMinValue(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::matrix_service::MinMaxResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matrix_service::MinMaxResponse>> AsyncFindMinValue(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matrix_service::MinMaxResponse>>(AsyncFindMinValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matrix_service::MinMaxResponse>> PrepareAsyncFindMinValue(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matrix_service::MinMaxResponse>>(PrepareAsyncFindMinValueRaw(context, request, cq));
    }
    ::grpc::Status FindMaxValue(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::matrix_service::MinMaxResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matrix_service::MinMaxResponse>> AsyncFindMaxValue(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matrix_service::MinMaxResponse>>(AsyncFindMaxValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matrix_service::MinMaxResponse>> PrepareAsyncFindMaxValue(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matrix_service::MinMaxResponse>>(PrepareAsyncFindMaxValueRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SortArray(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest* request, ::matrix_service::ArrayResponse* response, std::function<void(::grpc::Status)>) override;
      void SortArray(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest* request, ::matrix_service::ArrayResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FindMinValue(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest* request, ::matrix_service::MinMaxResponse* response, std::function<void(::grpc::Status)>) override;
      void FindMinValue(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest* request, ::matrix_service::MinMaxResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FindMaxValue(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest* request, ::matrix_service::MinMaxResponse* response, std::function<void(::grpc::Status)>) override;
      void FindMaxValue(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest* request, ::matrix_service::MinMaxResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::matrix_service::ArrayResponse>* AsyncSortArrayRaw(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::matrix_service::ArrayResponse>* PrepareAsyncSortArrayRaw(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::matrix_service::MinMaxResponse>* AsyncFindMinValueRaw(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::matrix_service::MinMaxResponse>* PrepareAsyncFindMinValueRaw(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::matrix_service::MinMaxResponse>* AsyncFindMaxValueRaw(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::matrix_service::MinMaxResponse>* PrepareAsyncFindMaxValueRaw(::grpc::ClientContext* context, const ::matrix_service::ArrayRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SortArray_;
    const ::grpc::internal::RpcMethod rpcmethod_FindMinValue_;
    const ::grpc::internal::RpcMethod rpcmethod_FindMaxValue_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sort an array
    virtual ::grpc::Status SortArray(::grpc::ServerContext* context, const ::matrix_service::ArrayRequest* request, ::matrix_service::ArrayResponse* response);
    // Find the minimum value in an array
    virtual ::grpc::Status FindMinValue(::grpc::ServerContext* context, const ::matrix_service::ArrayRequest* request, ::matrix_service::MinMaxResponse* response);
    // Find the maximum value in an array
    virtual ::grpc::Status FindMaxValue(::grpc::ServerContext* context, const ::matrix_service::ArrayRequest* request, ::matrix_service::MinMaxResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SortArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SortArray() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SortArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SortArray(::grpc::ServerContext* /*context*/, const ::matrix_service::ArrayRequest* /*request*/, ::matrix_service::ArrayResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSortArray(::grpc::ServerContext* context, ::matrix_service::ArrayRequest* request, ::grpc::ServerAsyncResponseWriter< ::matrix_service::ArrayResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindMinValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindMinValue() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FindMinValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindMinValue(::grpc::ServerContext* /*context*/, const ::matrix_service::ArrayRequest* /*request*/, ::matrix_service::MinMaxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindMinValue(::grpc::ServerContext* context, ::matrix_service::ArrayRequest* request, ::grpc::ServerAsyncResponseWriter< ::matrix_service::MinMaxResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindMaxValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindMaxValue() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_FindMaxValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindMaxValue(::grpc::ServerContext* /*context*/, const ::matrix_service::ArrayRequest* /*request*/, ::matrix_service::MinMaxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindMaxValue(::grpc::ServerContext* context, ::matrix_service::ArrayRequest* request, ::grpc::ServerAsyncResponseWriter< ::matrix_service::MinMaxResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SortArray<WithAsyncMethod_FindMinValue<WithAsyncMethod_FindMaxValue<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SortArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SortArray() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::matrix_service::ArrayRequest, ::matrix_service::ArrayResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::matrix_service::ArrayRequest* request, ::matrix_service::ArrayResponse* response) { return this->SortArray(context, request, response); }));}
    void SetMessageAllocatorFor_SortArray(
        ::grpc::MessageAllocator< ::matrix_service::ArrayRequest, ::matrix_service::ArrayResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::matrix_service::ArrayRequest, ::matrix_service::ArrayResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SortArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SortArray(::grpc::ServerContext* /*context*/, const ::matrix_service::ArrayRequest* /*request*/, ::matrix_service::ArrayResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SortArray(
      ::grpc::CallbackServerContext* /*context*/, const ::matrix_service::ArrayRequest* /*request*/, ::matrix_service::ArrayResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FindMinValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FindMinValue() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::matrix_service::ArrayRequest, ::matrix_service::MinMaxResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::matrix_service::ArrayRequest* request, ::matrix_service::MinMaxResponse* response) { return this->FindMinValue(context, request, response); }));}
    void SetMessageAllocatorFor_FindMinValue(
        ::grpc::MessageAllocator< ::matrix_service::ArrayRequest, ::matrix_service::MinMaxResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::matrix_service::ArrayRequest, ::matrix_service::MinMaxResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FindMinValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindMinValue(::grpc::ServerContext* /*context*/, const ::matrix_service::ArrayRequest* /*request*/, ::matrix_service::MinMaxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindMinValue(
      ::grpc::CallbackServerContext* /*context*/, const ::matrix_service::ArrayRequest* /*request*/, ::matrix_service::MinMaxResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FindMaxValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FindMaxValue() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::matrix_service::ArrayRequest, ::matrix_service::MinMaxResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::matrix_service::ArrayRequest* request, ::matrix_service::MinMaxResponse* response) { return this->FindMaxValue(context, request, response); }));}
    void SetMessageAllocatorFor_FindMaxValue(
        ::grpc::MessageAllocator< ::matrix_service::ArrayRequest, ::matrix_service::MinMaxResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::matrix_service::ArrayRequest, ::matrix_service::MinMaxResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FindMaxValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindMaxValue(::grpc::ServerContext* /*context*/, const ::matrix_service::ArrayRequest* /*request*/, ::matrix_service::MinMaxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindMaxValue(
      ::grpc::CallbackServerContext* /*context*/, const ::matrix_service::ArrayRequest* /*request*/, ::matrix_service::MinMaxResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SortArray<WithCallbackMethod_FindMinValue<WithCallbackMethod_FindMaxValue<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SortArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SortArray() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SortArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SortArray(::grpc::ServerContext* /*context*/, const ::matrix_service::ArrayRequest* /*request*/, ::matrix_service::ArrayResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindMinValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindMinValue() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FindMinValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindMinValue(::grpc::ServerContext* /*context*/, const ::matrix_service::ArrayRequest* /*request*/, ::matrix_service::MinMaxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindMaxValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindMaxValue() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_FindMaxValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindMaxValue(::grpc::ServerContext* /*context*/, const ::matrix_service::ArrayRequest* /*request*/, ::matrix_service::MinMaxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SortArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SortArray() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SortArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SortArray(::grpc::ServerContext* /*context*/, const ::matrix_service::ArrayRequest* /*request*/, ::matrix_service::ArrayResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSortArray(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindMinValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindMinValue() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_FindMinValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindMinValue(::grpc::ServerContext* /*context*/, const ::matrix_service::ArrayRequest* /*request*/, ::matrix_service::MinMaxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindMinValue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindMaxValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindMaxValue() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_FindMaxValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindMaxValue(::grpc::ServerContext* /*context*/, const ::matrix_service::ArrayRequest* /*request*/, ::matrix_service::MinMaxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindMaxValue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SortArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SortArray() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SortArray(context, request, response); }));
    }
    ~WithRawCallbackMethod_SortArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SortArray(::grpc::ServerContext* /*context*/, const ::matrix_service::ArrayRequest* /*request*/, ::matrix_service::ArrayResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SortArray(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FindMinValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FindMinValue() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FindMinValue(context, request, response); }));
    }
    ~WithRawCallbackMethod_FindMinValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindMinValue(::grpc::ServerContext* /*context*/, const ::matrix_service::ArrayRequest* /*request*/, ::matrix_service::MinMaxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindMinValue(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FindMaxValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FindMaxValue() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FindMaxValue(context, request, response); }));
    }
    ~WithRawCallbackMethod_FindMaxValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindMaxValue(::grpc::ServerContext* /*context*/, const ::matrix_service::ArrayRequest* /*request*/, ::matrix_service::MinMaxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindMaxValue(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SortArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SortArray() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::matrix_service::ArrayRequest, ::matrix_service::ArrayResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::matrix_service::ArrayRequest, ::matrix_service::ArrayResponse>* streamer) {
                       return this->StreamedSortArray(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SortArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SortArray(::grpc::ServerContext* /*context*/, const ::matrix_service::ArrayRequest* /*request*/, ::matrix_service::ArrayResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSortArray(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::matrix_service::ArrayRequest,::matrix_service::ArrayResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindMinValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FindMinValue() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::matrix_service::ArrayRequest, ::matrix_service::MinMaxResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::matrix_service::ArrayRequest, ::matrix_service::MinMaxResponse>* streamer) {
                       return this->StreamedFindMinValue(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FindMinValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindMinValue(::grpc::ServerContext* /*context*/, const ::matrix_service::ArrayRequest* /*request*/, ::matrix_service::MinMaxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindMinValue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::matrix_service::ArrayRequest,::matrix_service::MinMaxResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindMaxValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FindMaxValue() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::matrix_service::ArrayRequest, ::matrix_service::MinMaxResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::matrix_service::ArrayRequest, ::matrix_service::MinMaxResponse>* streamer) {
                       return this->StreamedFindMaxValue(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FindMaxValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindMaxValue(::grpc::ServerContext* /*context*/, const ::matrix_service::ArrayRequest* /*request*/, ::matrix_service::MinMaxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindMaxValue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::matrix_service::ArrayRequest,::matrix_service::MinMaxResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SortArray<WithStreamedUnaryMethod_FindMinValue<WithStreamedUnaryMethod_FindMaxValue<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SortArray<WithStreamedUnaryMethod_FindMinValue<WithStreamedUnaryMethod_FindMaxValue<Service > > > StreamedService;
};

}  // namespace matrix_service


#endif  // GRPC_matrix_5fservice_2eproto__INCLUDED
